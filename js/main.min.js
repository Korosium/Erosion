const AUTHOR_NAME='Korosium';const AVAILABLE_CIPHERS=['AES-256-CBC-HMAC-SHA-256','ChaCha20-Poly1305','XChaCha20-Poly1305'];const AVAILABLE_HASH=['SHA-256','SHA-256d','SHA3-256'];const AVAILABLE_ENCODING=['Binary','Octal','Decimal','Hex','Base32 (RFC-4648)','Base32 (Extended hex)','Base32 (z-base)','Base32 (Crockford)','Base64'];const AES_256_CBC_HMAC_SHA_256_MAC_LENGTH_IN_BYTES=16;const AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES=16;const MAGIC_NUMBER='EROSION';const CIPHER_MAGIC_NUMBER=[3,6,12];const HASH_MAGIC_NUMBER=[3,6,12];const ENCRYPTED_FILE_EXTENSION='.ero';const FILENAME_MAX_LENGTH=255;const FILE_ENCRYPTION_LIMIT=104857600;const FILE_DECRYPTION_LIMIT=108003328;const ASCII_NUMBER_INDEXES={start:48,end:57};const ASCII_UPPER_CASE_INDEXES={start:65,end:90};const ASCII_LOWER_CASE_INDEXES={start:97,end:122};const ASCII_SYMBOLS_INDEXES={start:33,end:126};const PLAINTEXT_EMPTY_ERROR_MESSAGE='The plaintext is empty.';const CIPHERTEXT_EMPTY_ERROR_MESSAGE='The ciphertext is empty.';const KEY_EMPTY_ERROR_MESSAGE='The key is empty.';const FILE_TO_ENCRYPT_ERROR_MESSAGE='Their is no file to encrypt.';const FILE_TO_DECRYPT_ERROR_MESSAGE='Their is no file to decrypt.';const FILE_TOO_BIG_ENCRYPT_ERROR_MESSAGE='The file is too big for encryption.';const FILE_TOO_BIG_DECRYPT_ERROR_MESSAGE='The file is too big for decryption.';const NO_COMBINATION_TEXT_DECRYPTION_ERROR_MESSAGE='No combination of settings was successful at decrypting the encrypted text.';const NO_COMBINATION_FILE_DECRYPTION_ERROR_MESSAGE='No combination of settings was successful at decrypting the encrypted file.';const NOT_RIGHT_KEY_ERROR_MESSAGE='Cannot decrypt the file because the wrong key was provided.';let clear_plaintext_file_results_timeout=setTimeout(()=>{plaintext_file_results.innerHTML='';},0);let clear_ciphertext_file_results_timeout=setTimeout(()=>{ciphertext_file_results.innerHTML='';},0);const plaintext_text_textarea=document.getElementById('plaintext-text-textarea');const plaintext_text_encrypt_button=document.getElementById('plaintext-text-encrypt-button');const plaintext_text_copy_button=document.getElementById('plaintext-text-copy-button');const plaintext_text_delete_button=document.getElementById('plaintext-text-delete-button');const ciphertext_text_textarea=document.getElementById('ciphertext-text-textarea');const ciphertext_text_decrypt_button=document.getElementById('ciphertext-text-decrypt-button');const ciphertext_text_copy_button=document.getElementById('ciphertext-text-copy-button');const ciphertext_text_delete_button=document.getElementById('ciphertext-text-delete-button');const key_text_input=document.getElementById('key-text-input');const key_text_show_button=document.getElementById('key-text-show-button');const key_text_copy_button=document.getElementById('key-text-copy-button');const key_text_generate_button=document.getElementById('key-text-generate-button');const key_text_delete_button=document.getElementById('key-text-delete-button');const plaintext_file_input=document.getElementById('plaintext-file-input');const plaintext_file_encrypt_button=document.getElementById('plaintext-file-encrypt-button');const plaintext_file_delete_button=document.getElementById('plaintext-file-delete-button');const plaintext_file_results=document.getElementById('plaintext-file-results');const ciphertext_file_input=document.getElementById('ciphertext-file-input');const ciphertext_file_decrypt_button=document.getElementById('ciphertext-file-decrypt-button');const ciphertext_file_delete_button=document.getElementById('ciphertext-file-delete-button');const ciphertext_file_results=document.getElementById('ciphertext-file-results');const key_file_input=document.getElementById('key-file-input');const key_file_show_button=document.getElementById('key-file-show-button');const key_file_copy_button=document.getElementById('key-file-copy-button');const key_file_generate_button=document.getElementById('key-file-generate-button');const key_file_delete_button=document.getElementById('key-file-delete-button');const settings_cipher_select=document.getElementById('settings-cipher-select');const settings_hash_select=document.getElementById('settings-hash-select');const settings_encoding_select=document.getElementById('settings-encoding-select');const settings_lock_check=document.getElementById('settings-lock-check');plaintext_text_encrypt_button.onclick=()=>encrypt_text();plaintext_text_copy_button.onclick=()=>copy_text_to_clipboard(plaintext_text_textarea.value);plaintext_text_delete_button.onclick=()=>plaintext_text_textarea.value='';ciphertext_text_decrypt_button.onclick=()=>decrypt_text();ciphertext_text_copy_button.onclick=()=>copy_text_to_clipboard(ciphertext_text_textarea.value);ciphertext_text_delete_button.onclick=()=>ciphertext_text_textarea.value='';key_text_show_button.onclick=()=>show_text_password(key_text_input,key_text_show_button);key_text_copy_button.onclick=()=>copy_text_to_clipboard(key_text_input.value);key_text_generate_button.onclick=()=>generate_text_password();key_text_delete_button.onclick=()=>key_text_input.value='';plaintext_file_input.onchange=()=>show_uploaded_plain_file();plaintext_file_encrypt_button.onclick=()=>encrypt_file();plaintext_file_delete_button.onclick=()=>delete_encrypt_file();ciphertext_file_input.onchange=()=>show_uploaded_cipher_file();ciphertext_file_decrypt_button.onclick=()=>decrypt_file();ciphertext_file_delete_button.onclick=()=>delete_decrypt_file();key_file_show_button.onclick=()=>show_text_password(key_file_input,key_file_show_button);key_file_copy_button.onclick=()=>copy_text_to_clipboard(key_file_input.value);key_file_generate_button.onclick=()=>generate_file_password();key_file_delete_button.onclick=()=>key_file_input.value='';settings_lock_check.onchange=()=>toggle_settings();const generate_text_password=()=>{key_text_input.value=generate_password();};const check_text_params=(input,error_message)=>{try{if(input.value.trim().length===0)throw new Error(error_message);if(key_text_input.value.length===0)throw new Error(KEY_EMPTY_ERROR_MESSAGE);}catch(error){window.alert(error.message);return false;}return true;};const encrypt_text=()=>{if(!check_text_params(plaintext_text_textarea,PLAINTEXT_EMPTY_ERROR_MESSAGE))return;const key=get_key(key_text_input.value,settings_hash_select.value);const ciphertext=get_ciphertext(key,plaintext_text_textarea.value.trim(),settings_cipher_select.value);const encoded=encode_cipertext(ciphertext,settings_encoding_select.value);ciphertext_text_textarea.value=encoded;};const decrypt_text=()=>{if(!check_text_params(ciphertext_text_textarea,CIPHERTEXT_EMPTY_ERROR_MESSAGE))return;try{decrypt_text_chosen_params();}catch{decrypt_text_bruteforce();}};const decrypt_text_chosen_params=()=>{const key=get_key(key_text_input.value,settings_hash_select.value);const ciphertext=decode_ciphertext(ciphertext_text_textarea.value.trim(),settings_encoding_select.value);const plaintext=to_utf8(get_plaintext(key,ciphertext,settings_cipher_select.value));plaintext_text_textarea.value=plaintext;show_decrypted_text_settings(settings_cipher_select.value,settings_hash_select.value,settings_encoding_select.value);};const decrypt_text_bruteforce=()=>{for(let i=0;i<AVAILABLE_CIPHERS.length;i++){for(let j=0;j<AVAILABLE_HASH.length;j++){const key=get_key(key_text_input.value,AVAILABLE_HASH[j]);for(let k=0;k<AVAILABLE_ENCODING.length;k++){try{const ciphertext=decode_ciphertext(ciphertext_text_textarea.value.trim(),AVAILABLE_ENCODING[k]);const plaintext=to_utf8(get_plaintext(key,ciphertext,AVAILABLE_CIPHERS[i]));plaintext_text_textarea.value=plaintext;show_decrypted_text_settings(AVAILABLE_CIPHERS[i],AVAILABLE_HASH[j],AVAILABLE_ENCODING[k]);return;}catch{console.clear();console.log('Retrying...');};}}}window.alert(NO_COMBINATION_TEXT_DECRYPTION_ERROR_MESSAGE);};const show_decrypted_text_settings=(cipher_algorithm,hash_algorithm,encoding_algorithm)=>{if(!settings_lock_check.checked){settings_cipher_select.value=cipher_algorithm;settings_hash_select.value=hash_algorithm;settings_encoding_select.value=encoding_algorithm;}};const encode_cipertext=(ciphertext,algorithm)=>{switch(algorithm){case AVAILABLE_ENCODING[0]:return ciphertext.map(x=>x.toString(2).padStart(8,'0')).join('');case AVAILABLE_ENCODING[1]:return ciphertext.map(x=>x.toString(8).padStart(3,'0')).join('');case AVAILABLE_ENCODING[2]:return BigInt(`0x${ciphertext.map(x => x.toString(16).padStart(2, '0')).join('')}`);case AVAILABLE_ENCODING[3]:return ciphertext.map(x=>x.toString(16).padStart(2,'0')).join('');case AVAILABLE_ENCODING[4]:return base32.RFC_4648.encode(ciphertext);case AVAILABLE_ENCODING[5]:return base32.BASE_32_HEX.encode(ciphertext);case AVAILABLE_ENCODING[6]:return base32.Z_BASE_32.encode(ciphertext);case AVAILABLE_ENCODING[7]:return base32.CROCKFORD_BASE_32.encode(ciphertext);case AVAILABLE_ENCODING[8]:return btoa(ciphertext.map(x=>String.fromCharCode(x)).join(''));}};const decode_ciphertext=(ciphertext,algorithm)=>{switch(algorithm){case AVAILABLE_ENCODING[0]:return from_bin(ciphertext);case AVAILABLE_ENCODING[1]:return from_oct(ciphertext);case AVAILABLE_ENCODING[2]:return from_hex(BigInt(ciphertext).toString(16));case AVAILABLE_ENCODING[3]:return from_hex(ciphertext);case AVAILABLE_ENCODING[4]:return base32.RFC_4648.decode.to_array(ciphertext);case AVAILABLE_ENCODING[5]:return base32.BASE_32_HEX.decode.to_array(ciphertext);case AVAILABLE_ENCODING[6]:return base32.Z_BASE_32.decode.to_array(ciphertext);case AVAILABLE_ENCODING[7]:return base32.CROCKFORD_BASE_32.decode.to_array(ciphertext);case AVAILABLE_ENCODING[8]:return atob(ciphertext).split('').map(x=>x.charCodeAt());}};const from_radix=(s,radix,padding)=>{let to_pad=padding-s.length%padding;if(to_pad===padding)to_pad=0;const to_process=s.padStart(s.length+to_pad,'0');let arr=[];for(let i=0;i<to_process.length;i+=padding){arr.push(parseInt(to_process.slice(i,i+padding),radix));}return arr;};const from_bin=s=>from_radix(s,2,8);const from_oct=s=>from_radix(s,8,3);const from_hex=s=>from_radix(s,16,2);const generate_file_password=()=>{key_file_input.value=generate_password();};const check_file_params=(input,error_message)=>{try{if(input.files.length===0)throw new Error(error_message);if(key_file_input.value.length===0)throw new Error(KEY_EMPTY_ERROR_MESSAGE);}catch(error){window.alert(error.message);return false;}return true;};const encrypt_file=()=>{if(!check_file_params(plaintext_file_input,FILE_TO_ENCRYPT_ERROR_MESSAGE))return;const file=plaintext_file_input.files[0];const fr=new FileReader();fr.onload=()=>{const timestamp=performance.now();const key=get_key(key_file_input.value,settings_hash_select.value);const data=[].slice.call(new Uint8Array(fr.result));const filename=to_byte(file.name).slice(0,FILENAME_MAX_LENGTH);const plaintext=[filename.length].concat(filename).concat(data);const ciphertext=get_magic_number(settings_cipher_select.value,settings_hash_select.value).concat(get_ciphertext(key,plaintext,settings_cipher_select.value));download_bytes(ciphertext,`${file.name}${ENCRYPTED_FILE_EXTENSION}`);deal_with_end_of_file_encryption(timestamp);};fr.onerror=()=>{console.log(fr.error);};fr.readAsArrayBuffer(file);};const decrypt_file=()=>{if(!check_file_params(ciphertext_file_input,FILE_TO_DECRYPT_ERROR_MESSAGE))return;const file=ciphertext_file_input.files[0];const fr=new FileReader();fr.onload=()=>{const data=[].slice.call(new Uint8Array(fr.result));if(to_utf8(data.slice(0,MAGIC_NUMBER.length))===MAGIC_NUMBER){try{decrypt_file_with_magic_number(data,file.name);}catch{window.alert(NOT_RIGHT_KEY_ERROR_MESSAGE);}}else{try{decrypt_file_without_magic_number(data,file.name);}catch{decrypt_file_bruteforce(data,file.name);}}};fr.onerror=()=>{console.log(fr.error);};fr.readAsArrayBuffer(file);};const decrypt_file_with_magic_number=(data,filename)=>{const timestamp=performance.now();const cipher_algorithm=get_cipher_algorithm_from_magic_number((data[MAGIC_NUMBER.length]>>>4)&0xf);const hash_algorithm=get_hash_algorithm_from_magic_number(data[MAGIC_NUMBER.length]&0xf);const key=get_key(key_file_input.value,hash_algorithm);const plaintext=get_plaintext(key,data.slice(MAGIC_NUMBER.length+1),cipher_algorithm);const obfuscate=plaintext[0]>0;const retrieved_filename=obfuscate?to_utf8(plaintext.slice(1,plaintext[0]+1)):filename.slice(0,filename.length-ENCRYPTED_FILE_EXTENSION.length);download_bytes(obfuscate?plaintext.slice(plaintext[0]+1):plaintext.slice(1),retrieved_filename);deal_with_end_of_file_decryption(timestamp);show_decrypted_file_settings(cipher_algorithm,hash_algorithm);};const get_cipher_algorithm_from_magic_number=n=>{switch(n){case CIPHER_MAGIC_NUMBER[0]:return AVAILABLE_CIPHERS[1];case CIPHER_MAGIC_NUMBER[1]:return AVAILABLE_CIPHERS[0];case CIPHER_MAGIC_NUMBER[2]:return AVAILABLE_CIPHERS[2];}};const get_hash_algorithm_from_magic_number=n=>{switch(n){case HASH_MAGIC_NUMBER[0]:return AVAILABLE_HASH[0];case HASH_MAGIC_NUMBER[1]:return AVAILABLE_HASH[1];case HASH_MAGIC_NUMBER[2]:return AVAILABLE_HASH[2];}};const decrypt_file_without_magic_number=(data,filename)=>{const timestamp=performance.now();const key=get_key(key_file_input.value,settings_hash_select.value);const plaintext=get_plaintext(key,data,settings_cipher_select.value);const obfuscate=plaintext[0]>0;const retrieved_filename=obfuscate?to_utf8(plaintext.slice(1,plaintext[0]+1)):filename.slice(0,filename.length-ENCRYPTED_FILE_EXTENSION.length);download_bytes(obfuscate?plaintext.slice(plaintext[0]+1):plaintext.slice(1),retrieved_filename);deal_with_end_of_file_decryption(timestamp);show_decrypted_file_settings(settings_cipher_select.value,settings_hash_select.value);};const decrypt_file_bruteforce=(data,filename)=>{const timestamp=performance.now();for(let i=0;i<AVAILABLE_CIPHERS.length;i++){for(let j=0;j<AVAILABLE_HASH.length;j++){try{const key=get_key(key_file_input.value,AVAILABLE_HASH[j]);const plaintext=get_plaintext(key,data,AVAILABLE_CIPHERS[i]);const obfuscate=plaintext[0]>0;const retrieved_filename=obfuscate?to_utf8(plaintext.slice(1,plaintext[0]+1)):filename.slice(0,filename.length-ENCRYPTED_FILE_EXTENSION.length);download_bytes(obfuscate?plaintext.slice(plaintext[0]+1):plaintext.slice(1),retrieved_filename);deal_with_end_of_file_decryption(timestamp);show_decrypted_file_settings(AVAILABLE_CIPHERS[i],AVAILABLE_HASH[j]);return;}catch{console.clear();console.log('Retrying...');}}}window.alert(NO_COMBINATION_FILE_DECRYPTION_ERROR_MESSAGE);};const show_decrypted_file_settings=(cipher_algorithm,hash_algorithm)=>{if(!settings_lock_check.checked){settings_cipher_select.value=cipher_algorithm;settings_hash_select.value=hash_algorithm;}};const deal_with_end_of_file_encryption=timestamp=>{plaintext_file_input.value='';plaintext_file_results.innerHTML=show_elapsed_time(performance.now()-timestamp,'encrypt');clear_plaintext_file_results_timeout=setTimeout(()=>{plaintext_file_results.innerHTML='';},5000);};const deal_with_end_of_file_decryption=timestamp=>{ciphertext_file_input.value='';ciphertext_file_results.innerHTML=show_elapsed_time(performance.now()-timestamp,'decrypt');clear_ciphertext_file_results_timeout=setTimeout(()=>{ciphertext_file_results.innerHTML='';},5000);};const get_magic_number=(cipher_algorithm,hash_algorithm)=>{let file_magic_number=[].slice.call(new TextEncoder().encode(MAGIC_NUMBER));const cipher_bits=get_cipher_magic_number(cipher_algorithm)<<4;const hash_bits=get_hash_magic_number(hash_algorithm);file_magic_number.push(cipher_bits|hash_bits);return file_magic_number;};const get_cipher_magic_number=cipher_algorithm=>{switch(cipher_algorithm){case AVAILABLE_CIPHERS[0]:return CIPHER_MAGIC_NUMBER[1];case AVAILABLE_CIPHERS[1]:return CIPHER_MAGIC_NUMBER[0];case AVAILABLE_CIPHERS[2]:return CIPHER_MAGIC_NUMBER[2];}};const get_hash_magic_number=hash_algorithm=>{switch(hash_algorithm){case AVAILABLE_HASH[0]:return HASH_MAGIC_NUMBER[0];case AVAILABLE_HASH[1]:return HASH_MAGIC_NUMBER[1];case AVAILABLE_HASH[2]:return HASH_MAGIC_NUMBER[2];}};const show_uploaded_plain_file=()=>{clearTimeout(clear_plaintext_file_results_timeout);plaintext_file_results.innerHTML=show_file_size(plaintext_file_input.files[0].size);if(plaintext_file_input.files[0].size>FILE_ENCRYPTION_LIMIT){window.alert(FILE_TOO_BIG_ENCRYPT_ERROR_MESSAGE);plaintext_file_delete_button.click();}};const show_uploaded_cipher_file=()=>{clearTimeout(clear_ciphertext_file_results_timeout);ciphertext_file_results.innerHTML=show_file_size(ciphertext_file_input.files[0].size);if(ciphertext_file_input.files[0].size>FILE_DECRYPTION_LIMIT){window.alert(FILE_TOO_BIG_DECRYPT_ERROR_MESSAGE);ciphertext_file_delete_button.click();}};const delete_encrypt_file=()=>{plaintext_file_input.value='';plaintext_file_results.innerHTML='';};const delete_decrypt_file=()=>{ciphertext_file_input.value='';ciphertext_file_results.innerHTML='';};const show_file_size=size=>{if(size<=1)return`${size} byte`;if(size<1024)return`${size} bytes`;if(size/1024<1024)return`${(size / 1024).toFixed(2)} KB`;if(size/1024/1024<1024)return`${(size / 1024 / 1024).toFixed(2)} MB`;};const show_elapsed_time=(took,operation)=>{if(took<1000)return`It took ${took.toFixed(2)} ms to ${operation} the file.`;if(took/1000<1000)return`It took ${(took / 1000).toFixed(2)} seconds to ${operation} the file.`;if(took/1000/1000<1000)return`It took ${(took / 1000 / 1000).toFixed(2)} minutes to ${operation} the file.`;};const download_bytes=(bytes,name)=>{let a=window.document.createElement('a');a.href=window.URL.createObjectURL(new Blob([new Uint8Array(bytes)]));a.download=name;a.click();URL.revokeObjectURL(a.href);a=null;};const to_byte=s=>[].slice.call(new TextEncoder().encode(s));const to_utf8=arr=>new TextDecoder().decode(new Uint8Array(arr).buffer);const get_key=(key,algorithm)=>{switch(algorithm){case AVAILABLE_HASH[0]:return sha256.hash.array(key);case AVAILABLE_HASH[1]:return sha256.hash.array(sha256.hash.array(key));case AVAILABLE_HASH[2]:return sha3_256.hash.array(key);}};const get_ciphertext=(key,plaintext,algorithm)=>{switch(algorithm){case AVAILABLE_CIPHERS[0]:return encrypt_with_aes_256_cbc_hmac_sha_256(key,plaintext);case AVAILABLE_CIPHERS[1]:return chacha20_poly1305.encrypt.array(key,plaintext);case AVAILABLE_CIPHERS[2]:return xchacha20_poly1305.encrypt.array(key,plaintext);}};const encrypt_with_aes_256_cbc_hmac_sha_256=(key,plaintext)=>{const ciphertext=aes.cbc.encrypt.array(key,plaintext);const mac=sha256.hmac.array(sha256.hash.array(key),ciphertext,AES_256_CBC_HMAC_SHA_256_MAC_LENGTH_IN_BYTES);return ciphertext.slice(0,AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES).concat(mac).concat(ciphertext.slice(AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES));};const get_plaintext=(key,ciphertext,algorithm)=>{switch(algorithm){case AVAILABLE_CIPHERS[0]:return decrypt_with_aes_256_cbc_hmac_sha_256(key,ciphertext);case AVAILABLE_CIPHERS[1]:return chacha20_poly1305.decrypt.array.to_array(key,ciphertext);case AVAILABLE_CIPHERS[2]:return xchacha20_poly1305.decrypt.array.to_array(key,ciphertext);}};const decrypt_with_aes_256_cbc_hmac_sha_256=(key,ciphertext)=>{const received_iv=ciphertext.slice(0,AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES);const received_mac=ciphertext.slice(AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES,AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES+AES_256_CBC_HMAC_SHA_256_MAC_LENGTH_IN_BYTES).map(x=>x.toString(16).padStart(2,'0')).join('');const received_ciphertext=received_iv.concat(ciphertext.slice(AES_256_CBC_HMAC_SHA_256_IV_LENGTH_IN_BYTES+AES_256_CBC_HMAC_SHA_256_MAC_LENGTH_IN_BYTES));const calculated_mac=sha256.hmac.hex(sha256.hash.array(key),received_ciphertext,AES_256_CBC_HMAC_SHA_256_MAC_LENGTH_IN_BYTES);if(calculated_mac===received_mac){return aes.cbc.decrypt.array.to_array(key,received_ciphertext);}else{throw new Error(NOT_RIGHT_KEY_ERROR_MESSAGE);}};const show_text_password=(password_input,show_button)=>{if(password_input.type==='password'){password_input.type='text';show_button.innerHTML='Hide';}else{password_input.type='password';show_button.innerHTML='Show';}};const rng=(min,max)=>{const seed=crypto.getRandomValues(new Uint32Array(1))[0]/2**32;return Math.floor(seed*(max-min)+min);};const remove_element_from_array=(arr,i)=>{const l=arr.slice(0,i);const u=arr.slice(i+1);return l.concat(u);};const generate_char_array=(start,end)=>{let retval=[];for(let i=start;i<=end;i++){retval.push(String.fromCharCode(i));}return retval;};const generate_symbols_array=()=>{let retval=[];for(let i=ASCII_SYMBOLS_INDEXES.start;i<=ASCII_SYMBOLS_INDEXES.end;i++){if(i===ASCII_NUMBER_INDEXES.start)i=ASCII_NUMBER_INDEXES.end+1;if(i===ASCII_UPPER_CASE_INDEXES.start)i=ASCII_UPPER_CASE_INDEXES.end+1;if(i===ASCII_LOWER_CASE_INDEXES.start)i=ASCII_LOWER_CASE_INDEXES.end+1;retval.push(String.fromCharCode(i));}return retval;};const generate_password=(length=32)=>{const numbers_arr=generate_char_array(ASCII_NUMBER_INDEXES.start,ASCII_NUMBER_INDEXES.end);const upper_arr=generate_char_array(ASCII_UPPER_CASE_INDEXES.start,ASCII_UPPER_CASE_INDEXES.end);const lower_arr=generate_char_array(ASCII_LOWER_CASE_INDEXES.start,ASCII_LOWER_CASE_INDEXES.end);const symbols_arr=generate_symbols_array();const flags={numbers:false,uppers:false,lowers:false,symbols:false};let arr=[];while(!flags.numbers||!flags.uppers||!flags.lowers||!flags.symbols){flags.numbers=false;flags.uppers=false;flags.lowers=false;flags.symbols=false;arr=[];for(let i=0;i<length;i++){const r=rng(0,4);if(r%4===0){arr.push(numbers_arr[rng(0,numbers_arr.length)]);flags.numbers=true;}else if(r%4===1){arr.push(upper_arr[rng(0,upper_arr.length)]);flags.uppers=true;}else if(r%4===2){arr.push(lower_arr[rng(0,lower_arr.length)]);flags.lowers=true;}else if(r%4===3){arr.push(symbols_arr[rng(0,symbols_arr.length)]);flags.symbols=true;}}}let password='';for(i=0;i<length;i++){const n=rng(0,arr.length);password+=arr[n];arr=remove_element_from_array(arr,n);}return password;};const toggle_settings=()=>{settings_cipher_select.disabled=settings_lock_check.checked;settings_hash_select.disabled=settings_lock_check.checked;settings_encoding_select.disabled=settings_lock_check.checked;};const copy_text_to_clipboard=s=>navigator.clipboard.writeText(s);const fill_select=(select,array)=>{for(let i=0;i<array.length;i++){const option=document.createElement('option');option.value=array[i];option.innerHTML=array[i];select.append(option);}};const init=()=>{fill_select(settings_cipher_select,AVAILABLE_CIPHERS);fill_select(settings_hash_select,AVAILABLE_HASH);fill_select(settings_encoding_select,AVAILABLE_ENCODING);plaintext_text_delete_button.click();ciphertext_text_delete_button.click();key_text_delete_button.click();plaintext_file_delete_button.click();ciphertext_file_delete_button.click();key_file_delete_button.click();ciphertext_file_input.accept=ENCRYPTED_FILE_EXTENSION;settings_cipher_select.value='XChaCha20-Poly1305';settings_hash_select.value='SHA3-256';settings_encoding_select.value='Base64';settings_lock_check.checked=true;toggle_settings();document.getElementsByTagName('footer')[0].innerHTML+=`<p>Copyright ${new Date().getFullYear()} ${AUTHOR_NAME}</p>`;};const main=()=>{init();};window.onload=main;